#!/usr/bin/env python
# --------------------------------
# Copyright (c) 2011 "Capensis" [http://www.capensis.com]
#
# This file is part of Canopsis.
#
# Canopsis is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Canopsis is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Canopsis.  If not, see <http://www.gnu.org/licenses/>.
# ---------------------------------

import sys, os, getopt, json, urllib2, urllib, cookielib

from cstorage import cstorage
from caccount import caccount
from crecord import crecord
from camqp import camqp
import cevent

def usage():
	print(" Usage: send_event ")
	print
	print(" Options:")
	print("  -s, --server=[SERVER_ADDR]")
	print("		webserver address (default : localhost:8082)")
	print("  -a, --authkey=[AUTHKEY]")
	print("  -f, --file=[FILE_PATH]")
	print("		file contraining a json event to send")
	print("  -j, --json=[JSON]")
	print("		a json string containing a correct event to send")
	print("  -h, --help")
	print("		show help")

def main(argv):
	try:
		opts, args = getopt.getopt(	sys.argv[1:], 
									"s:a:f:j:h",
									["server=","authkey=", "file=", "json=", "help"])
	except getopt.GetoptError, err:
		print(err)
		usage()
		sys.exit(2)

	if len(opts) < 1:
		usage()
		sys.exit()
	
	#---------------------------option processing----------------------
	authkey = None
	server = 'localhost:8082'
	json_file = None
	json_string = None
	
	for opt, arg in opts:
		if opt in ('-h', '--help'):
			usage()
			sys.exit()
		if opt in ( '--server','-s'):
			server = arg
		if opt in ( '--authkey','-a'):
			authkey = arg
		if opt in ( '--file','-f'):
			json_file = arg
		if opt in ( '--json','-j'):
			try:
				json_string = json.loads(arg)
			except:
				print('Bad json string')
				sys.exit()
	
	#---------------------------authentificate-------------------------
	if not authkey:
		print('You must provide a authkey to access to webserver')
		sys.exit()
		
	cj = cookielib.CookieJar()
	opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
	print('http://%s/autoLogin/%s' % (server,authkey))
	r = opener.open('http://%s/autoLogin/%s' % (server,authkey))
	r = opener.open('http://%s/account/me' % server)
	
	try:
		response = json.loads(r.read())
	except Exception,err:
		print('Error: bad response from server %s' % err)
		
	if not response['success']:
		print('Bad authkey, no matching with any user')
		sys.exit()
	
	#------------------------------prepare event-----------------------
	
	#if json_string:
	'''
	data = {
		'connector':		'connector',
		'connector_name':	'connector_name',
		'event_type':		'event_type',
		'source_type':		'source_type',
		'component':		'component',
		'resource':			'resource',	
		'state':			'state',
		'state_type':		'state_type',
		'output':			'output',
		'long_output':		'long_output',
		'perf_data':		'perf_data',
		'perf_data_array':	'perf_data_array',
	}
	'''
	request = urllib2.Request('http://%s/sendEvent/' % server, urllib.urlencode(data))
	print(str(request))
	r = opener.open(request)
	print(r.read())
	
		



if __name__ == "__main__":
    main(sys.argv[1:])
