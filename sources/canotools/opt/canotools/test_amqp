#!/usr/bin/env python

import time
import logging

from hypamqp2 import hypamqp
from amqplib import client_0_8 as amqp

########################################################
#
#   Configuration
#
########################################################

DAEMON_NAME = "test"
DAEMON_TYPE = "logger"

AMQP_HOST = "localhost"

logging.basicConfig(level=logging.DEBUG,
                    format='%(asctime)s %(name)s %(levelname)s %(message)s',
                    )
logger = logging.getLogger(DAEMON_NAME)
myamqp = None

########################################################
#
#   Callback
#
########################################################

def on_message(msg):
	source = msg.delivery_info['routing_key'] + "@" + msg.delivery_info['exchange']
	print "%s:\n\t%s\n" % (source, msg.body)


########################################################
#
#   Functions
#
########################################################


#### Connect signals
RUN = 1
import signal
def signal_handler(signum, frame):
	logger.warning("Receive signal to stop daemon...")
	global RUN	
	RUN = 0
	## Stop amqp
	if myamqp:
		myamqp.disconnect()
 
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)


########################################################
#
#   Main
#
########################################################

myamqp = hypamqp()
myamqp.connect()

myamqp.create_queue(DAEMON_NAME)

myamqp.bind_queue(DAEMON_NAME, "#")
myamqp.consume_queue(DAEMON_NAME, on_message)

i=0
while RUN:
	msg = amqp.Message("Message pour nagios.check.host %i" % i)
	myamqp.publish(msg, "nagios.check.host")
	i=i+1
	time.sleep(1)

myamqp.disconnect()
