#!/bin/bash
#--------------------------------
# Copyright (c) 2011 "Capensis" [http://www.capensis.com]
#
# This file is part of Canopsis.
#
# Canopsis is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Canopsis is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Canopsis.  If not, see <http://www.gnu.org/licenses/>.
# ---------------------------------

CONF_PATH=$HOME/etc/daemon.d/
APP_NAME=`basename $0`

if [ "x$APP_NAME" == "xdaemon" ]; then
	echo "You must use with symlink ..."
	exit 1
fi

if [ -e $CONF_PATH/$APP_NAME.conf ]; then
	. $CONF_PATH/$APP_NAME.conf
else
	echo "Impossible to find daemon configuration ..."
	exit 1
fi

if [ "x$APP_BIN" == "x" ]; then
	echo "Error in configuration ..."
	exit 1
fi

if [ "x$START" == "x" ]; then START=0; fi
if [ "x$NB_PROC" == "x" ]; then  NB_PROC=1; fi
if [ "x$SUDO" == "x" ]; then  SUDO=0; fi

if [ $START -eq 0 ]; then
	echo "This Daemon are disable ... Set START=1 in configuration's file for start it."
	exit 1
fi

PID_FILE=$HOME/var/run/$APP_NAME.pid
LOG=$HOME/var/log/$APP_NAME.log

function check_pid(){
	PID=$1
	echo `ps a | grep "$PID" | grep -v grep | wc -l`
}

function set_pid(){
	PID=$1
	echo $PID >> $PID_FILE
}

function get_pid(){
	if [ -e $PID_FILE ]; then
		echo "`cat $PID_FILE`" | grep -v "^$"
	fi
}

function remove_pid(){
	PID=$1
	TMP=`mktemp`
	cat $PID_FILE | grep -v $PID > $TMP
	mv $TMP $PID_FILE
}

function clean_pid(){
	for PID in `get_pid`; do
		if [ `check_pid $PID` -eq 0 ]; then
			remove_pid $PID
		fi
	done
}

function stop_pid(){
	PID=$1
	if [ `check_pid $PID` -eq 0 ]; then
		echo " + $PID seems dead."
		remove_pid $PID
	else
		#echo " + Try to kill $PID ..."
		kill $PID
		check=1

		while [ 1 ]; do
			sleep 1
			echo -n '.'
			if [[ `check_pid $PID` -eq 0 || $check -ge 5 ]]; then
				break
			fi
			kill -2 $PID
			check=$((check + 1))
		done

		if [ `check_pid $PID` -eq 0 ]; then
			echo " Ok"
			remove_pid $PID
		else
			echo " Failed"
		fi
	fi
}

function start(){
	if [ `get_pid | wc -l` -ge $NB_PROC ]; then
		echo " + Max process reached ..."
		exit 1
	fi
	for NB in `seq $NB_PROC`; do
		if [ $NB_PROC -ne 1 ]; then
			echo " + Start process $NB ..."
		fi

		CMD="$HOME/bin/python $APP_BIN $NB"

		if [ $SUDO -eq 1 ]; then
			CMD="sudo $CMD"
			nohup $CMD 1>> $LOG 2>> $LOG &
			## get child process
			sleep 0.5
			PID=$(awk '$4 == '${!}' {pid = substr(FILENAME, 7) + 0; print pid}' /proc/[0-9]*/stat)
		else
			nohup $CMD 1>> $LOG 2>> $LOG &
			PID=$!
		fi

		echo " + $PID"
		set_pid $PID
	done
}

function stop(){
	PIDS=`get_pid`
	for PID in $PIDS; do
		echo -n " + $PID"
		stop_pid $PID
	done	
}

function status(){
	for PID in `get_pid`; do
		echo " + $PID run"
	done
}

clean_pid
case "$1" in
	start)
		echo "Starting $APP_NAME ..."
		start
		;;
	stop)
		echo "Stopping $APP_NAME :"
		stop
		;;
	status)
		echo "Status $APP_NAME ..."
		status
		;;
	restart)
		echo "Restarting $APP_NAME ..."
		stop
		start
		;;
	*)
		echo "$0 [start|stop|restart|status]"
		;;
esac
