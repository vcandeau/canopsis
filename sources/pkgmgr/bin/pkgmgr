#!/bin/bash
#--------------------------------
# Copyright (c) 2011 "Capensis" [http://www.capensis.com]
#
# This file is part of Canopsis.
#
# Canopsis is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Canopsis is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Canopsis.  If not, see <http://www.gnu.org/licenses/>.
# ---------------------------------

. $HOME/etc/pkgmgr.conf
. $HOME/lib/common.sh
. $HOME/lib/pkgmgr/db
. $HOME/lib/pkgmgr/manual
. $HOME/lib/pkgmgr/list
. $HOME/lib/pkgmgr/clean
. $HOME/lib/pkgmgr/actions
. $HOME/lib/pkgmgr/deps
. $HOME/lib/pkgmgr/lock
. $HOME/lib/pkgmgr/conffiles
. $HOME/lib/pkgmgr/extract

touch $LOCAL_DB_PATH
touch $REMOTE_DB_PATH
touch $VARLIB_PATH/info
mkdir -p $HOME/var/log
touch $LOG_PATH

exit_pending="False"

#================#
# VARLIB_PATH    #
# PACKAGES_PATH  #
# LOCAL_DB_PATH  #
# REMOTE_DB_PATH #
# LOG_PATH       #
#================#

detect_os > /dev/null

trap 'on_die' 1 2 3 4 5 6 7 8 10 12 13 14 15 20

function ask_confirmation() {
	if [ "$OPT" != "--force-yes" ]; then
		read -p "Do you want to continue [y/N]? " -n 1
		if [[ ! $REPLY =~ ^[Yy]$ ]]; then
			echo 
			echo "Abort." && exit 1
		else
			echo
		fi
	fi
}

function pkg_list_install_deps() {
	if [ "$OPT" == "--force-yes" ]; then
		offset=${@:3}
		pkg_list_deps=$(build_install_deps_tree "$offset")
    else
		offset=${@:2}
		pkg_list_deps=$(build_install_deps_tree "$offset") 
	fi
}

function pkg_list_remove_deps() {
	if [ "$OPT" == "--force-yes" ]; then
        offset=${@:3}
        pkg_list_deps=$(build_remove_deps_tree "$offset")
    else
        offset=${@:2}
        pkg_list_deps=$(build_remove_deps_tree "$offset")
    fi
}

function pkg_list() {
	if [ "$OPT" == "--force-yes" ]; then 
		offset=${@:3}
        pkg_list=$offset
	else
		offset=${@:2}
        pkg_list=$offset
    fi
}

function print_deps() {
	for dep in $1; do
		echo "      - $dep"
	done
}

function check_args() {
	if [[ $# -le 1 && "$OPT" != "--force-yes" ]]; then
		show_help
	elif [[ $# -le 2 && "$OPT" == "--force-yes" ]]; then
		show_help
	fi
}

###############
###   RUN   ###
###############
ACTION=$1
OPT=$2

if [[ "x$ACTION" =~ ^(xinstall|xreinstall|xinstall-local|xreinstall-local|xupgrade|xremove|xlist|xclean|xupdate)$ ]]; then
	if [ "x$ACTION" = "xinstall" ]; then
		check_args $@
		update_db && pkg_list_install_deps "$@"
		echo " :: Resolve dependencies"
		echo "    + Following dependencies will be installed" && print_deps "$pkg_list_deps"
		ask_confirmation
		install_package $pkg_list_deps && exit $?; fi
	if [ "x$ACTION" = "xreinstall" ]; then 
		check_args $@
		update_db && pkg_list "$@"
		install_package $pkg_list "_force" && exit $?; fi
	if [ "x$ACTION" = "xinstall-local" ]; then 
		check_args $@
		pkg_list "$@"
		install_local_package $pkg_list && exit $?; fi
	if [ "x$ACTION" = "xreinstall-local" ]; then
		check_args $@
		pkg_list "$@"
		install_local_package $pkg_list "_force" && exit $?; fi
	if [ "x$ACTION" = "xupgrade" ]; then
		check_args $@
		update_db && pkg_list "$@"
		upgrade_package $pkg_list && exit $?; fi
	if [ "x$ACTION" = "xremove" ]; then
		check_args $@
		pkg_list "$@"
		echo " :: Following packages will be removed"
		print_deps "$pkg_list"
		#echo " :: Resolve dependencies"
        #echo "    + Following packages will be removed (dependencies inclued)" && print_deps "$pkg_list_deps"
        #echo "    + Dependencies conflicts"
		#send_removal_conflicts | while read line ; do echo "      - $line"; done
        ask_confirmation
		remove_package $pkg_list && exit $?; fi
	if [ "x$ACTION" = "xupdate" ]; then 
		update_db && exit $?; fi
	if [ "x$ACTION" = "xlist" ]; then 
		create_view && exit $?; fi
	if [ "x$ACTION" = "xclean" ]; then 
		clean_cache && exit $?; fi
	show_help
else
	show_help
fi
