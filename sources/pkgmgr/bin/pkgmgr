#!/bin/bash

. $HOME/etc/pkgmgr.conf
. $HOME/lib/common.sh
. $HOME/lib/pkgmgr/db
. $HOME/lib/pkgmgr/list
. $HOME/lib/pkgmgr/clean
. $HOME/lib/pkgmgr/actions
. $HOME/lib/pkgmgr/deps
. $HOME/lib/pkgmgr/lock

touch $LOCAL_DB_PATH
touch $REMOTE_DB_PATH
touch $VARLIB_PATH/info
mkdir -p $HOME/var/log
touch $LOG_PATH

exit_pending="False"

#================#
# VARLIB_PATH    #
# PACKAGES_PATH  #
# LOCAL_DB_PATH  #
# REMOTE_DB_PATH #
# LOG_PATH       #
#================#

detect_os > /dev/null

trap 'on_die' 1 2 3 4 5 6 7 8 10 12 13 14 15 20

function show_help(){
	echo
    echo " :: Usage : pkgmgr [ACTION] [OPTIONS] <package>"
	echo
	echo " :: Actions :"
    echo "   install [OPT] [PKG]            ->  Install package(s)"
    echo "   install-local [OPT] [PKGPATH]  ->  Install local package(s)"
    echo "   reinstall [PKG]                ->  Reinstall package(s)"
    echo "   reinstall-local [PKGPATH]      ->  Reinstall local package(s)"
    echo "   upgrade [PKG]                  ->  Upgrade package(s)"
    echo "   remove [OPT] [PKG]             ->  Remove package(s)"
    echo "   update                         ->  Update local database"
    echo "   list                           ->  List packages"
    echo "   clean                          ->  Clean cache"
    echo "   help                           ->  Print this help"
	echo
	echo " :: Options :"
	echo "   --force-yes                    -> Force yes answer"
	echo
	echo " :: Examples :"
	echo "   pkgmgr install python erlang"
	echo "   pkgmgr remove --force-yes ccli"
	echo "	 pkgmgr install-local /root/mypkg.tgz mypkg2.tgz"
	echo
    exit 1
}

function ask_confirmation() {
	if [ "$OPT" != "--force-yes" ]; then
		read -p "Are you sure? [y|N] " -n 1
		if [[ ! $REPLY =~ ^[Yy]$ ]]; then echo && exit 1; fi
	fi
}

function pkg_list_deps() {
	if [ "$OPT" == "--force-yes" ]; then
		offset=${@:3}
		pkg_list_deps=$(build_deps_tree "$offset")
    else
		offset=${@:2}
		pkg_list_deps=$(build_deps_tree "$offset") 
	fi
}

function pkg_list() {
	if [ "$OPT" == "--force-yes" ]; then 
		offset=${@:3}
        pkg_list=$offset
	else
		offset=${@:2}
        pkg_list=$offset
    fi
}

function print_deps() {
	for dep in $1; do
		echo "  - $dep"
	done
}

###############
###   RUN   ###
###############
ACTION=$1
OPT=$2

if [[ "x$ACTION" =~ ^(xinstall|xreinstall|xinstall-local|xreinstall-local|xupgrade|xremove|xlist|xclean|xupdate)$ ]]; then
	if [ "x$ACTION" = "xinstall" ]; then
		update_db && pkg_list_deps "$@"
		echo -e "Following dependencies will be installed: " && print_deps "$pkg_list_deps"
		ask_confirmation
		install_package $pkg_list_deps && exit $?; fi
	if [ "x$ACTION" = "xreinstall" ]; then 
		update_db && pkg_list "$@"
		install_package $pkg_list "_force" && exit $?; fi
	if [ "x$ACTION" = "xinstall-local" ]; then 
		pkg_list_deps "$@"
		echo "Following dependencies will be installed: " && print_deps "$pkg_list_deps"
		ask_confirmation
		install_local_package $pkg_list_deps && exit $?; fi
	if [ "x$ACTION" = "xreinstall-local" ]; then
		pkg_list "$@"
		install_local_package $pkg_list "_force" && exit $?; fi
	if [ "x$ACTION" = "xupgrade" ]; then
		update_db && pkg_list "$@"
		upgrade_package $pkg_list && exit $?; fi
	if [ "x$ACTION" = "xremove"  ]; then
		pkg_list_deps "$@"
        echo "Following dependencies will be removed: " && print_deps "$pkg_list_deps"
        ask_confirmation
		remove_package $pkg_list_deps && exit $?; fi
	if [ "x$ACTION" = "xupdate" ]; then 
		update_db && exit $?; fi
	if [ "x$ACTION" = "xlist" ]; then 
		create_view && exit $?; fi
	if [ "x$ACTION" = "xclean" ]; then 
		clean_cache && exit $?; fi
	show_help
else
	show_help
fi
