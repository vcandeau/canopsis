#!/bin/bash
#--------------------------------
# Copyright (c) 2011 "Capensis" [http://www.capensis.com]
#
# This file is part of Canopsis.
#
# Canopsis is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Canopsis is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Canopsis.  If not, see <http://www.gnu.org/licenses/>.
# ---------------------------------

set -e -o pipefail

############################
######  Logging Trap  ######
############################
log_info () {
	local MESSAGE="$1"
	if [ $LOG -ge 1 ]; then
		echo -e "[`date +'%T %x'`][INF] ${MESSAGE}" >> "$LOG_FILE"
	fi
}

log_debug () {
	local MESSAGE="$1"
	if [ $LOG -ge 4 ]; then
		echo -e "[`date +'%T %x'`][DEB] ${MESSAGE}" >> "$LOG_FILE"
	fi
}

log_verbose () {
	local MESSAGE="$1"
	if [ $LOG -ge 3 ]; then
		echo -e "[`date +'%T %x'`][DEB] ${MESSAGE}" >> "$LOG_FILE"
	fi
}

error () {
	local PARENT_LINENO="$1"
	local MESSAGE="$2"
	local CODE="${3:-1}"
	if [ $LOG == 4 ];then
	if [ -n "$MESSAGE" ]; then
			echo -e "[`date +'%T %x'`][ERR][${PARENT_LINENO}] ${MESSAGE} (${CODE})" >> "$LOG_FILE"
			echo -e "[ERR] ${MESSAGE} (${CODE})"
		fi
		if [ -n "$_VER" ]; then
			echo -e "[`date +'%T %x'`][VER][${PARENT_LINENO}] ${_VER}" >> "$LOG_FILE"
		fi
		if [ -n "$_DEB" ]; then
			echo -e "[`date +'%T %x'`][DEB][${PARENT_LINENO}] ${_DEB}" >> "$LOG_FILE"
		fi
		echo
		echo "-------------------- LOG (5 last lines)"
		tail -n 6 $LOG_FILE
		echo "-------------------- END"
	elif [ $LOG == 3 ];then
		if [ -n "$MESSAGE" ]; then
			echo -e "[`date +'%T %x'`][ERR][${PARENT_LINENO}] ${MESSAGE} (${CODE})" >> "$LOG_FILE"
			echo -e "[ERR] ${MESSAGE} (${CODE})"
		fi
		if [ -n "$_VER" ]; then
			echo -e "[`date +'%T %x'`][VER][${PARENT_LINENO}] ${_VER}" >> "$LOG_FILE"
		fi
		echo
		echo "-------------------- LOG (5 last lines)"
		tail -n 6 $LOG_FILE
		echo "-------------------- END"
	elif [ $LOG == 2 ];then
		if [ -n "$MESSAGE" ]; then
			echo -e "[`date +'%T %x'`][ERR][${PARENT_LINENO}] ${MESSAGE} (${CODE})" >> "$LOG_FILE"
			echo -e "[ERR] ${MESSAGE} (${CODE})"
		fi
	fi
	_VER=""
	_DEB=""
	off_lock
	rm -Rf $TMP_FILE
	exit ${CODE}
}
##########################
##########################

. $HOME/lib/common.sh 
. $HOME/lib/pkgmgr/common
set +e
detect_os > /dev/null
set -e
. $HOME/etc/pkgmgr.conf
. $HOME/lib/pkgmgr/db 
. $HOME/lib/pkgmgr/manual 
. $HOME/lib/pkgmgr/list 
. $HOME/lib/pkgmgr/clean 
. $HOME/lib/pkgmgr/actions 
. $HOME/lib/pkgmgr/deps 
. $HOME/lib/pkgmgr/lock 
. $HOME/lib/pkgmgr/extract 
. $HOME/lib/pkgmgr/completion
. $HOME/lib/pkgmgr/export

mkdir -p $HOME/var/log
touch $LOG_FILE
set +e

exit_pending=false

trap '' 2 
#trap 'on_die' 1 2 3 4 5 6 7 8 10 12 13 14 15 20

curl_settings () {
	curl_cmd="curl"
	if [ -n "$HTTP_PROXY" ]; then
		curl_cmd="$curl_cmd --proxy $HTTP_PROXY"
	fi
	if [ -n "$HTTP_AUTH" ]; then
		echo $HTTP_AUTH
		curl_cmd="$curl_cmd --proxy-user $HTTP_AUTH"
	fi
	if [ -n "$TIMEOUT" ]; then
		curl_cmd="$curl_cmd --connect-timeout $TIMEOUT"
	else
		curl_cmd="$curl_cmd --connect-timeout 10"
	fi
}

update_info () {
	sed -i /^"ARCH|"/d $VARLIB_PATH/info
	echo "ARCH|$ARCH" >> $VARLIB_PATH/info
	sed -i /^"DIST|"/d $VARLIB_PATH/info
	echo "DIST|$DIST" >> $VARLIB_PATH/info
	sed -i /^"DIST_VERS|"/d $VARLIB_PATH/info
	echo "DIST_VERS|$DIST_VERS" >> $VARLIB_PATH/info
}

ask_confirmation () {
	if [ "$OPT" != "--force-yes" ]; then
		read -p "Do you want to continue [y/N]? "
		if [[ ! $REPLY =~ ^[Yy]$ ]]; then
			echo 
			echo "Abort." && exit 1
		else
			echo
		fi
	else
		log_info "Detect --force-yes option"
	fi
}

pkg_list_install_deps () {
	if [ "$OPT" == "--force-yes" ]; then
		offset=${@:3}
		build_install_deps_tree "$offset"
    else
		offset=${@:2}
		build_install_deps_tree "$offset" 
	fi
}

pkg_list_remove_deps () {
	if [ "$OPT" == "--force-yes" ]; then
        offset=${@:3}
        pkg_list_deps=$(build_remove_deps_tree "$offset")
    else
        offset=${@:2}
        pkg_list_deps=$(build_remove_deps_tree "$offset")
    fi
}

pkg_list () {
	if [ "$OPT" == "--force-yes" ]; then 
		offset=${@:3}
        pkg_list=$offset
	else
		offset=${@:2}
        pkg_list=$offset
    fi
}

print_deps () {
	for dep in $1; do
		echo "      - $dep"
	done
}

check_args () {
	if [[ $# -le 1 && "$OPT" != "--force-yes" ]]; then
		show_help
	elif [[ $# -le 2 && "$OPT" == "--force-yes" ]]; then
		show_help
	fi
}

###############
###   RUN   ###
###############
ACTION=$1
OPT=$2

if [[ "x$ACTION" =~ ^(xinstall|xreinstall|xinstall-local|xreinstall-local|xupgrade|xremove|xlist|xclean|xupdate|xexport)$ ]]; then

	if ! [ -z $OPT ]; then
		_test_option=$(grep "^[-0-9a-zA-Z]*$" <<<$OPT)
		if [ -z $_test_option ]; then
	    	echo " :: Package name contain non alphanumeric character(s)"
    		exit 1
		fi
	fi

	log_info "Create local db file"
	touch $LOCAL_DB_PATH 2>&1 | tee -a $LOG_FILE

	log_info "Create remote db file"
	touch $REMOTE_DB_PATH 2>&1 | tee -a $LOG_FILE

	log_info "Create info file"
	touch $VARLIB_PATH/info 2>&1 | tee -a $LOG_FILE	
	
	update_info

	curl_settings
	log_debug "Curl command: $curl_cmd"

	if [ "x$ACTION" = "xinstall" ]; then
		check_args $@
		update_db
		pkg_list_install_deps "$@"
		echo " :: Resolve dependencies"
		echo "    + Following dependencies will be installed" && print_deps "$pkg_list_deps"
		ask_confirmation
		install_package $pkg_list_deps && exit $?; fi
	if [ "x$ACTION" = "xreinstall" ]; then 
		check_args $@
		update_db && pkg_list "$@"
		install_package $pkg_list "_force" && exit $?; fi
	if [ "x$ACTION" = "xinstall-local" ]; then 
		check_args $@
		pkg_list "$@"
		install_local_package $pkg_list && exit $?; fi
	if [ "x$ACTION" = "xreinstall-local" ]; then
		check_args $@
		pkg_list "$@"
		install_local_package $pkg_list "_force" && exit $?; fi
	if [ "x$ACTION" = "xupgrade" ]; then
		check_args $@
		update_db
		trap 'error ${LINENO} "Package dependencie failure, look at: ($LOG_FILE)"' ERR
		pkg_list_install_deps "$@"
		echo " :: Resolve dependencies"
		echo "    + Following dependencies will be installed or upgraded" && print_deps "$pkg_list_deps"
		ask_confirmation
		upgrade_package $pkg_list_deps && exit $?; fi

	if [ "x$ACTION" = "xremove" ]; then
		check_args $@
		pkg_list "$@"
		echo " :: Following packages will be removed"
		print_deps "$pkg_list"
		#echo " :: Resolve dependencies"
        #echo "    + Following packages will be removed (dependencies inclued)" && print_deps "$pkg_list_deps"
        #echo "    + Dependencies conflicts"
		#send_removal_conflicts | while read line ; do echo "      - $line"; done
        ask_confirmation
		remove_package $pkg_list && exit $?; fi
	if [ "x$ACTION" = "xupdate" ]; then 
		update_db && exit $?; fi
	if [ "x$ACTION" = "xlist" ]; then 
		create_view && exit $?; fi
	if [ "x$ACTION" = "xclean" ]; then 
		clean_cache && exit $?; fi
	if [ "x$ACTION" = "xexport" ]; then
		export_view && exit $?; fi
	show_help
else
	show_help
fi
