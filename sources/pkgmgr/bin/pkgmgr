#!/bin/bash

. $HOME/lib/common.sh
. $HOME/etc/pkgmgr.conf

touch $LOCAL_DB_PATH
touch $REMOTE_DB_PATH
touch $VARLIB_PATH/info
mkdir -p var/log
touch $LOG_PATH

#================#
# VARLIB_PATH    #
# PACKAGES_PATH  #
# LOCAL_DB_PATH  #
# REMOTE_DB_PATH #
# LOG_PATH       #
#================#

detect_os > /dev/null

function check_repo(){
	response=$(curl --write-out %{http_code} --silent --output /dev/null ${REPO_URL})
	if [ $response -ne 200 ]; then
	    echo -e "\033[91mError\033[0m: $REPO_URL is not joinable ($response) !"
		exit 1
	fi
}

function db_get(){
	PNAME=$1
	touch $LOCAL_DB_PATH
	echo `cat $LOCAL_DB_PATH | grep $PNAME | tail -n1`
}

function db_set(){
	PNAME=$1
	VERS=$2
	STATUS=$3
	MD5=$4
	DEPS=$5
	sed "/$PNAME/d" -i $LOCAL_DB_PATH
	echo "$PNAME|$VERS|$STATUS|$MD5|$DEPS" >> $LOCAL_DB_PATH
	check_code $? "Database insertion ($PNAME)"
}

function db_del(){
	PNAME=$1
	sed "/$PNAME/d" -i $LOCAL_DB_PATH
	check_code $? "Database deletion ($PNAME)"
}

function db_parse(){
	INFO=$1
	DATA=$2
	if [ "x$INFO" = "xversion" ]; then
        FIELD=1
		VERS_INFO=$(echo "$DATA" | cut -d '|' -f2)
        echo "$VERS_INFO" | cut -d '-' -f$FIELD
	elif [ "x$INFO" = "xrelease" ]; then
		FIELD=2
		VERS_INFO=$(echo "$DATA" | cut -d '|' -f2)
		echo "$VERS_INFO" | cut -d '-' -f$FIELD
	else
		if [ "x$INFO" = "xname" ]; then	
			FIELD=1
		elif [ "x$INFO" = "xstatus" ]; then 
			FIELD=3
		elif [ "x$INFO" = "xmd5" ]; then
			FIELD=4
		elif [ "x$DEPs" = "xdeps" ]; then
			FIELD=5
		fi
		echo "$DATA" | cut -d '|' -f$FIELD
	fi
}

function get_ppath(){
	PNAME=$1
    PPATH="$PACKAGES_PATH/$PNAME"
    if [ ! -e $PPATH ]; then
		if [ ! -e $PPATH.tgz ]; then
			check_code $? "Package $PNAME not found ($PPATH.tgz)" >&2
	        exit 1
		else
			cd $PACKAGES_PATH
			tar xfz $PNAME.tgz
			check_code $? "Untar package ($PNAME.tgz) failure"
		fi
	fi
	echo $PPATH
}

function install_package(){
    PNAME=$1
	DBINFO=$(db_get "$PNAME")
    L_STATUS=$(db_parse "status" "$DBINFO")
	if [ "$L_STATUS" == "installed" ]; then 
		echo " :: Reinstall package $PNAME"
	else
		echo " :: Install package $PNAME"
	fi

	update_db
	download_package "$PNAME"

	R_INFO=$(echo `cat $REMOTE_DB_PATH | grep $PNAME | tail -n1`)
	R_MD5=$(db_parse "md5" "$R_INFO")

	PPATH=$(get_ppath "$PNAME")
    check_code $?
	
	L_MD5=$(md5sum $PPATH.tgz | awk '{ print $1 }')

	if [ "$L_MD5" != "$R_MD5" ]; then check_code $? "Md5sum Error!" && exit 0; fi

	cd $PREFIX
	tar xfz $PPATH/files.tgz
	check_code $? "Untar files.tgz ($PNAME) failure"
	. $PPATH/control
	check_code $? "Source control file from $PNAME failure"
	install
	check_code $? "Install function ($PNAME) failure"
	db_set "$PNAME" "$VERSION-$RELEASE" "installed"

	echo " + Done"
}

function remove_package(){
    PNAME=$1
	DBINFO=$(db_get "$PNAME")
    PSTATUS=$(db_parse "status" "$DBINFO")

	if [ ! "x$PSTATUS" = "x" ]; then
	    echo " :: Remove package $PNAME"
		PPATH=$(get_ppath "$PNAME")
		check_code $?
	    . $PPATH/control
	    check_code $? "Source control file from $PNAME failure"
	    remove
		check_code $? "Remove function ($PNAME) failure"

		db_del "$PNAME"
	else
		echo " :: Package $PNAME is not installed"
		exit 1
	fi
	echo " + Done"
}

function upgrade_package(){
    PNAME=$1
	echo " :: Upgrade package $PNAME ..."

    update_db
    download_package "$PNAME"

    R_INFO=$(echo `cat $REMOTE_DB_PATH | grep $PNAME | tail -n1`)
    R_MD5=$(db_parse "md5" "$R_INFO")

    PPATH=$(get_ppath "$PNAME")
    check_code $?

    L_MD5=$(md5sum $PPATH.tgz | awk '{ print $1 }')

	echo "   + Checking Md5Sum.."
    if [ "$L_MD5" != "$R_MD5" ]; then check_code $? "Md5sum Error!" && exit 0; fi

    cd $PREFIX
    tar xfz $PPATH/files.tgz
    check_code $? "Untar package ($PNAME.tgz) failure"
    . $PPATH/control
    check_code $? "Source control file from $PNAME failure"
    update
    check_code $? "Update function ($PNAME) failure"

    db_set "$PNAME" "$VERSION-$RELEASE" "installed"
    
	echo "   + Done"
}

function create_view(){
	LAST_UPDATE=$(cat $VARLIB_PATH/info | grep "LAST_UPDATE" | tail -n1 | cut -d '|' -f2)
	if [ -z "$LAST_UPDATE" ]; then LAST_UPDATE="Never"; fi
	echo
	echo "Last update : `echo $LAST_UPDATE`"
	echo
	echo -e "#=============================================================#"
    echo -e "| Package                 Version             Status          |"
    echo -e "#=============================================================#"
	while read line; do
        FIELD=1
        L_PNAME=$(echo "$line" | cut -d '|' -f$FIELD)
        L_VERS=$(db_parse "version" "$line")
        L_REL=$(db_parse "release" "$line")
        L_STATUS=$(db_parse "status" "$line")

		R_INFO=$(cat $REMOTE_DB_PATH | grep $L_PNAME | tail -n1)
        if [[ -z "$R_INFO" ]];then
			L_STATUS="\e[42m \033[0m Installed"
            echo -e "  $L_PNAME(*)|$L_VERS-$L_REL|$L_STATUS" | awk '{ printf "%-26s%-20s%s\n",$1,$2,$3}' FS=\|
        else
			R_VERS=$(db_parse "version" "$R_INFO")
			R_REL=$(db_parse "release" "$R_INFO")
			if [ -z "$L_STATUS" ]; then 
	            L_STATUS="\e[0;101m \033[0m Not Installed"
    	        L_VERS_INFO=""
        	    R_VERS_INFO=[$R_VERS-$R_REL]
	        else
    	        if [ "$R_VERS" == "$L_VERS" ]; then
        	        if [ "$R_REL" == "$L_REL" ]; then
            	        L_STATUS="\e[42m \033[0m Up-to-date"
                	    R_VERS_INFO=""
                    	L_VERS_INFO=$L_VERS-$L_REL
	                else
    	                L_STATUS="\E[43;31m \033[0m New Release"
        	            R_VERS_INFO=[$R_VERS-$R_REL]
            	        L_VERS_INFO="$L_VERS-$L_REL -> "
                	fi
	            else
    	            L_STATUS="\E[43;31m \033[0m New Version"
        	        R_VERS_INFO=[$R_VERS-$R_REL]
            	    L_VERS_INFO="$L_VERS-$L_REL -> "
	            fi
    	    fi    
	        echo -e "  $L_PNAME|$L_VERS_INFO$R_VERS_INFO|$L_STATUS" | awk '{ printf "%-26s%-20s%s\n",$1,$2,$3}' FS=\|
		fi
    done < "$LOCAL_DB_PATH"

	while read line; do
		FIELD=1
		R_PNAME=$(echo "$line" | cut -d '|' -f$FIELD)
		R_VERS=$(db_parse "version" "$line")
		R_REL=$(db_parse "release" "$line")
		L_INFO=$(db_get "$R_PNAME")
		L_VERS=$(db_parse "version" "$L_INFO")
		L_REL=$(db_parse "release" "$L_INFO")
		L_STATUS=$(db_parse "status" "$L_INFO")

		R_VERS_INFO=[$R_VERS-$R_REL]	
	
		if [ -z "$L_INFO" ]; then
			L_STATUS="\e[0;101m \033[0m Not Installed"
			echo -e "  $R_PNAME|$R_VERS_INFO|$L_STATUS" | awk '{ printf "%-26s%-20s%s\n",$1,$2,$3}' FS=\|
		fi
	done < "$REMOTE_DB_PATH"
	echo
}

function download_package(){
	PNAME=$1
	FINAL_URL=$REPO_URL/$REPO_BASE/$REPO_VERS/$ARCH/$DIST/$DIST_VERS

	echo "   + Remove old packages"
	rm -Rf $PACKAGES_PATH/$PNAME*
	check_code $? "Removing old packages failure"

	echo "   + Download $PNAME ..."
	wget "$FINAL_URL/$PNAME.tgz" -O $PACKAGES_PATH/$PNAME.tgz -a $LOG_PATH
	check_code $? "Failure during download package"
}

function update_db(){
	check_repo
	if [ -z "$REPO_BASE" ]; then
		FINAL_URL=$REPO_URL/$REPO_VERS/$ARCH/$DIST/$DIST_VERS
	else
		FINAL_URL=$REPO_URL/$REPO_BASE/$REPO_VERS/$ARCH/$DIST/$DIST_VERS
	fi

	rm -Rf $REMOTE_DB_PATH
	check_code $? "Failure during remove old database"

	echo " :: Download Packages.list ..."
	wget "$FINAL_URL/Packages.list" -O $REMOTE_DB_PATH -a $LOG_PATH
	check_code $? "Packages.list not accessible"

	echo "LAST_UPDATE|`date`" > $VARLIB_PATH/info
	check_code $? "Pkgmgr info file insertion error"
	echo "   + Done"
}

function clean_cache(){
	echo " :: Clean cache"
	echo "   + Remove Remote Db"
	rm -Rf $REMOTE_DB_PATH
	check_code $? "Failure during remove old database"
	echo "   + Remove Packages in cache"
	rm -Rf $VARLIB_PATH/packages/*
	check_code $? "Failure during remove old packages"
	echo "   + Update Pkgmgr info file"
	sed "/LAST_UPDATE/d" -i $VARLIB_PATH/info
	echo "   + Done"
	exit 1
}

function install_local_package(){
	FULLPATH=$1
	FILENAME="${FULLPATH##*/}"
	if ! [[ ${FILENAME: -4} == ".tgz" || $(exit $?) == 1 ]]; then 
		echo "Package format must be packagename.tgz"
        exit 1
	fi
	PNAME="${FILENAME%.[^.]*}"
	if [ -z "$PNAME" ]; then
		echo "There is an error in the path"
		exit 1
	fi
	DBINFO=$(db_get "$PNAME")
    L_STATUS=$(db_parse "status" "$DBINFO")
    if [ "$L_STATUS" == "installed" ]; then
        echo " :: Reinstall package $PNAME"
    else
        echo " :: Install package $PNAME"
    fi

    cp $FULLPATH $PACKAGES_PATH
	cd $PACKAGES_PATH
    tar xfz $PNAME.tgz
    check_code $? "Untar package ($PNAME.tgz) failure"
	PPATH=$PACKAGES_PATH/$PNAME

	cd $PREFIX
    tar xfz $PPATH/files.tgz
    check_code $? "Untar files.tgz ($PNAME) failure"
    . $PPATH/control
    check_code $? "Source control file from $PNAME failure"
    install
    check_code $? "Install function ($PNAME) failure"
    db_set "$PNAME" "$VERSION-$RELEASE" "installed"

    echo " + Done"	
}

function show_help(){
    echo "Usage : pkgmgr [OPTION]"
    echo "     install [PKGNAME]        ->  Install package"
    echo "     install-local [PKGPATH]  ->  Install local  package"
    echo "     upgrade [PKGNAME]        ->  Upgrade package"
    echo "     remove [PKGNAME]         ->  Remove package"
    echo "     update                   ->  Update local database"
    echo "     list                     ->  List packages"
    echo "     clean                    ->  Clean cache"
    echo "     help                     ->  Print this help"
    exit 1
}

###############
###   RUN   ###
###############
ACTION=$1

if [[ "x$ACTION" =~ ^(xinstall|xinstall-local|xupgrade|xremove|xlist|xclean|xupdate)$ ]]; then
	if [[ "x$ACTION" = "xinstall" && $# -eq 2 ]]; then install_package $2 && exit $?; fi
	if [[ "x$ACTION" = "xinstall-local" && $# -eq 2 ]]; then install_local_package $2 && exit $?; fi
	if [[ "x$ACTION" = "xupgrade" && $# -eq 2 ]]; then upgrade_package $2 && exit $?; fi
	if [[ "x$ACTION" = "xremove" && $# -eq 2 ]]; then remove_package $2 && exit $?; fi
	if [[ "x$ACTION" = "xupdate" ]]; then update_db && exit $?; fi
	if [[ "x$ACTION" = "xlist" ]]; then create_view && exit $?; fi
	if [[ "x$ACTION" = "xclean" ]]; then clean_cache && exit $?; fi
	show_help
else
	show_help
fi
