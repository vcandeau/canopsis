#!/bin/bash
#--------------------------------
# Copyright (c) 2011 "Capensis" [http://www.capensis.com]
#
# This file is part of Canopsis.
#
# Canopsis is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Canopsis is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Canopsis.  If not, see <http://www.gnu.org/licenses/>.
# ---------------------------------

#####################
# Load control file #
#####################
function load_control_tpl(){
	. $HOME/lib/pkgmgr/control.tpl
	check_code $? "Source control default template failure"
}

###############################
# Search package and untar it #
###############################
function get_ppath(){
    PNAME=$1
    PPATH="$PACKAGES_PATH/$PNAME"
    #if [ ! -e $PPATH ]; then
        if [ ! -e $PPATH.tar ]; then
            check_code $? "Package $PNAME not found ($PPATH.tar)" >&2
            exit 1
        else
            cd $PACKAGES_PATH
			rm -Rf $PNAME
            tar xf $PNAME.tar
            check_code $? "Untar package ($PNAME.tar) failure"
        fi
    #fi
    echo $PPATH
}

####################
# Download Package #
####################
function download_package() {
    PNAME=$1
	# Create URL
	# Check if there is a repo base url
	if [ -z "$REPO_BASE" ]; then
        FINAL_URL=$REPO_URL/$REPO_VERS/$ARCH/$DIST/$DIST_VERS
    else
        FINAL_URL=$REPO_URL/$REPO_BASE/$REPO_VERS/$ARCH/$DIST/$DIST_VERS
    fi
	# Remove old packages
    echo "    + Remove old packages"
    rm -Rf $PACKAGES_PATH/$PNAME*
    check_code $? "Removing old packages failure"

	# Go to packages folder
	cd $PACKAGES_PATH

	# Download it
	echo "    + Download $PNAME"
    #wget --progress=bar:force $FINAL_URL/$PNAME.tar 2>&1 | progressbar
    curl -# -o $PNAME.tar $FINAL_URL/$PNAME.tar 
	check_code $? "Failure during download package"
}

###################
# Install package #
###################
function install_package () {
	xforce=""
	# Check if force option in enable
	if [ "${@: -1}" == "_force" ]; then xforce="True"; lst="${@:1:($#-1)}"; else lst="$@"; fi
	# For each package in list
	for ARG in $lst; do
		PNAME=$ARG
		# Get local informations
	    DBINFO=$(db_get "$PNAME")
		# Get local status
    	L_STATUS=$(db_parse "status" "$DBINFO")
		# If already installed and force option so reinstall it
	    if [[ "$L_STATUS" == "installed" && "$xforce" == "True" ]]; then
    	    echo " :: Reinstall package $PNAME"
		# If already install and no force, exit
	    elif [[ "$L_STATUS" == "installed" && -z "$xforce" ]]; then
	        echo " :: Package $PNAME already installed"
			# If it's not the last package continue
			if [ "$PNAME" == "${@: -1}" ]; then exit 1; else continue; fi
		# Else (not already installed)
		else
			# Get remote informations
        	R_INFO=$(echo `cat $REMOTE_DB_PATH | grep "^$PNAME|" | tail -n1`)
			# If no remote informations, package is not available
	        if [ -z "$R_INFO" ]; then
    	        echo " :: Package $PNAME not available"
				if [ "$PNAME" == "${@: -1}" ]; then exit 1; else continue; fi
			# Else, install package
	        else
    		    echo " :: Install package $PNAME"
	        fi
    	fi
		
		res="True"
	    # LOCAL ARCHIVE
	    if [[ -e $PACKAGES_PATH/$PNAME.tar ]]; then
	        echo "    + Package archive already in cache"
			PPATH="$PACKAGES_PATH/$PNAME"
    	    R_INFO=$(echo `cat $REMOTE_DB_PATH | grep "^$PNAME|" | tail -n1`)
	        R_MD5=$(db_parse "md5" "$R_INFO")
	        L_MD5=$(md5sum $PPATH.tar | awk '{ print $1 }')
    	    if [ "$L_MD5" != "$R_MD5" ]; then
	        	echo "      + Check MD5: [Fail]"
	    	else
				echo "      + Check MD5: [Success]"
				on_lock
            	PPATH=$(get_ppath "$PNAME")
            	off_lock
				res="False"
			fi
		fi
		
    	# DOWNLOAD PACKAGE
	    if [[ "$res" == "True" ]]; then
    	    download_package "$PNAME"
    	    R_INFO=$(echo `cat $REMOTE_DB_PATH | grep "^$PNAME|" | tail -n1`)
        	R_MD5=$(db_parse "md5" "$R_INFO")
			on_lock
	        PPATH=$(get_ppath "$PNAME")
    	    check_code $?
			off_lock
        	L_MD5=$(md5sum $PPATH.tar | awk '{ print $1 }')
    	    if [ "$L_MD5" != "$R_MD5" ]; then
	        	echo "    + Check MD5: [Fail]"
				exit 1
			else
				echo "    + Check MD5: [Success]"
			fi
	    fi	

		on_lock
		load_control_tpl
	    . $PPATH/control
	    check_code $? "Source control file from $PNAME failure"
	    echo "    + Pre-install"
		echo "-----"
	    pre_install
		echo "-----"
	    check_code $? "Pre-install step failure"
	    echo "    + Install"
	    cd $PREFIX
		install_bin $PPATH
	    check_code $? "Untar bin from files.bz2 ($PNAME) failure"
		install_conf $PPATH
	    check_code $? "Untar conf from files.bz2 ($PNAME) failure"
    	echo "    + Post-install"
		echo "-----"
	    post_install 
		echo "-----"
    	check_code $? "Post-install function ($PNAME) failure"
	    db_set "$PNAME" "$VERSION-$RELEASE" "installed"
    	echo "    + Remove package folder"
	    rm -Rf $PPATH
    	check_code $? "Post installation package folder remove failure"
	    echo "    + Done"
		off_lock
	done
}

function install_local_package () {
	xforce=""
	if [ "${@: -1}" == "_force" ]; then xforce="True"; lst="${@:1:($#-1)}"; else lst="$@"; fi
	for ARG in $lst; do
	    FULLPATH=$ARG
    	FILENAME="${FULLPATH##*/}"
	    if ! [ -e $FULLPATH ]; then
			echo " :: Package not found"
			echo "    | $FULLPATH"
			exit 1
		fi
	    if ! [[ ${FILENAME: -4} == ".tar" || $(exit $?) == 1 ]]; then
    	    echo " :: Package format must be packagename.tar"
			echo "    | $FILENAME"
			if [ "$PNAME" == "${@: -1}" ]; then exit 1; else continue; fi
    	fi
	    PNAME="${FILENAME%.[^.]*}"
    	if [ -z "$PNAME" ]; then
	        echo " :: There is an error in the path"
			echo "    | $FILENAME"
			if [ "$PNAME" == "${@: -1}" ]; then exit 1; else continue; fi
	    fi
    	DBINFO=$(db_get "$PNAME")
	    L_STATUS=$(db_parse "status" "$DBINFO")
    	if [[ "$L_STATUS" == "installed"  && "$xforce" == "True" ]]; then
        	echo " :: Reinstall $PNAME"
    	elif [[ "$L_STATUS" == "installed" && -z "$xforce" ]]; then
			echo " :: Package $PNAME already installed"
			if [ $PNAME == ${@: -1} ]; then exit 1; else continue; fi
		else
	        echo " :: Install package $PNAME"
	    fi
		on_lock
    	cp $FULLPATH $PACKAGES_PATH
	    cd $PACKAGES_PATH
		PPATH=$(get_ppath "$PNAME")
		load_control_tpl
		. $PPATH/control	
	    check_code $? "Source control file from $NAME failure"
		echo "    + Pre-install"
		echo "-----"
	    pre_install 
		echo "-----"
		check_code $? "Pre-install step failure"
		echo "    + Install"
	    cd $PREFIX
		install_bin $PPATH
        check_code $? "Untar bin from files.bz2 ($NAME) failure"
        install_conf $PPATH
        check_code $? "Untar conf from files.bz2 ($NAME) failure"
		echo "    + Post-install"
		echo "-----"
	    post_install 
		echo "-----"
	    check_code $? "Post-install step ($PNAME) failure"
	
	    db_set "$PNAME" "$VERSION-$RELEASE" "installed"
		
		echo "    + Remove package folder"
	    rm -Rf $PPATH
	    check_code $? "Post install-local package folder remove failure"
	
	    echo "    + Done"  
		off_lock
	done
}

function remove_package(){
	for ARG in "$@";   do
		PNAME=$ARG

		pbl="False"
	    for pkg in $PKG_BLACKLIST; do
	        if [ "$PNAME" == "$pkg" ]; then
				pbl="True"
				break
			fi
		done
		
		if [ "$pbl" == "True" ]; then
			echo " :: Package $PNAME blacklisted"
			continue
		fi

		on_lock
	    DBINFO=$(db_get "$PNAME")
	    PSTATUS=$(db_parse "status" "$DBINFO")
		L_VERS=$(db_parse "version" "$DBINFO")
        L_REL=$(db_parse "release" "$DBINFO")
        L_MD5=$(db_parse "md5" "$DBINFO")
	
	    if [ "x$PSTATUS" == "xinstalled" ]; then
	        echo " :: Remove package $PNAME"
		    PPATH=$(get_ppath "$PNAME")
			check_code $? "Package manipulation failure (Untar..)"
			load_control_tpl
	        . $PPATH/control
	        check_code $? "Source control file from $PNAME failure"
			echo "    + Pre-remove"
			echo "-----"
	        pre_remove 
			echo "-----"
			check_code $? "Pre-remove step failure"
			echo "    + Remove files"
			while read line; do
				rm -Rf $PREFIX/$(echo $line | cut -b 1-2 --complement)
			done < $PPATH/files.lst
	        check_code $? "Remove files in files.lst ($PNAME) failure"
			echo "    + Post-remove"
			echo "-----"
			post_remove 
			echo "-----"
			check_code $? "Post-remove step failure"
			echo "    + Remove package folder"
		    rm -Rf $PPATH
	    	check_code $? "Post remove package folder remove failure"
	        db_del "$PNAME"
	    else
	        echo " :: Package $PNAME is not installed"
	        if [ "$PNAME" == "${@: -1}" ]; then exit 1; else continue; fi
	    fi
	    echo "    + Done"
		off_lock
	done
}

function upgrade_package(){
	for ARG in "$@";   do
		PNAME=$ARG
    	DBINFO=$(db_get "$PNAME")
		L_STATUS=$(db_parse "status" "$DBINFO")
	
		if [ "$L_STATUS" == "installed" ]; then
			L_VERS=$(db_parse "version" "$DBINFO")
	    	L_REL=$(db_parse "release" "$DBINFO")
			R_INFO=$(echo `cat $REMOTE_DB_PATH | grep "^$PNAME|" | tail -n1`)
			R_VERS=$(db_parse "version" "$R_INFO")
			R_REL=$(db_parse "release" "$R_INFO")
			R_MD5=$(db_parse "md5" "$R_INFO")
	
			if [ "$R_VERS" == "$L_VERS" ]; then	
				if [ "$R_REL" == "$L_REL" ]; then
					echo " :: No new version or release for $PNAME"
					continue
				else echo -e "\n :: Upgrade package release $PNAME";	fi
			else echo -e "\n :: Upgrade package version $PNAME"; fi
	
		    download_package "$PNAME"
		
			on_lock
		    PPATH=$(get_ppath "$PNAME")
		    check_code $?
			off_lock
	    	L_MD5=$(md5sum $PPATH.tar | awk '{ print $1 }')
	
	    	if [ "$L_MD5" != "$R_MD5" ]; then
				echo "     + Checking Md5Sum: [Fail]"
				exit 1
			else
				echo "     + Checking Md5Sum: [Success]"
			fi
			on_lock
			load_control_tpl
		    . $PPATH/control
		    check_code $? "Source control file from $PNAME failure"
			echo "     + Pre-update"
			echo "-----"
			pre_update 
			echo "-----"
			check_code $? "Pre-update function ($PNAME) failure"
			echo "     + Update"
	    	cd $PREFIX
			install_bin $PPATH
        	check_code $? "Untar bin from files.bz2 ($PNAME) failure"
        	install_conf $PPATH
        	check_code $? "Untar conf from files.bz2 ($PNAME) failure"
			echo "     + Post-update"
			echo "-----"
	    	post_update 
			echo "-----"
		    check_code $? "Post-update function ($PNAME) failure"
	
	    	db_set "$PNAME" "$VERSION-$RELEASE" "installed"
	
			echo "     + Remove package folder"
	    	rm -Rf $PPATH
		    check_code $? "Post upgrade package folder remove failure"
			off_lock
		else 
			echo " :: Package $PNAME is not installed"
			if [ "$PNAME" == "${@: -1}" ]; then exit 1; else continue; fi
	    fi
	    echo "     + Done"
	done
}
