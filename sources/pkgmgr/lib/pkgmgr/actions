#!/bin/bash

function load_control_tpl(){
	. $HOME/lib/pkgmgr/control.tpl
	check_code $? "Source control default template failure"
}

function get_ppath(){
    PNAME=$1
    PPATH="$PACKAGES_PATH/$PNAME"
    if [ ! -e $PPATH ]; then
        if [ ! -e $PPATH.tgz ]; then
            check_code $? "Package $PNAME not found ($PPATH.tgz)" >&2
            exit 1
        else
            cd $PACKAGES_PATH
            tar xfz $PNAME.tgz
            check_code $? "Untar package ($PNAME.tgz) failure"
        fi
    fi
    echo $PPATH
}

function download_package(){
    PNAME=$1
	if [ -z "$REPO_BASE" ]; then
        FINAL_URL=$REPO_URL/$REPO_VERS/$ARCH/$DIST/$DIST_VERS
    else
        FINAL_URL=$REPO_URL/$REPO_BASE/$REPO_VERS/$ARCH/$DIST/$DIST_VERS
    fi

    echo "   + Remove old packages"
    rm -Rf $PACKAGES_PATH/$PNAME*
    check_code $? "Removing old packages failure"

	cd $PACKAGES_PATH

	echo "   + Download $PNAME"    
    echo -n "    "
    wget --progress=dot $FINAL_URL/$PNAME.tgz 2>&1 | grep --line-buffered "%" | \
        sed -u -e "s,\.,,g" | awk '{printf("\b\b\b\b%4s", $2)}'
    echo -ne "\b\b\b\b"
    echo " DONE"
    check_code $? "Failure during download package"
}

function install_package(){
	update_db
	xforce=""
	if [ "${@: -1}" == "_force" ]; then xforce="True"; fi

	for ARG in "${@:-1}";	do
		PNAME=$ARG
	    DBINFO=$(db_get "$PNAME")
    	L_STATUS=$(db_parse "status" "$DBINFO")
	    if [[ "$L_STATUS" == "installed" && "$xforce" == "True" ]]; then
    	    echo " :: Reinstall package $PNAME"
	    elif [[ "$L_STATUS" == "installed" && -z "$xforce" ]]; then
	        echo " :: Package $PNAME already installed"
			if [ $PNAME == ${@: -1} ]; then exit 1; else continue; fi
	    else
        	R_INFO=$(echo `cat $REMOTE_DB_PATH | grep ^$PNAME | tail -n1`)
	        if [ -z "$R_INFO" ]; then
    	        echo " :: Package $PNAME not available"
				if [ "$PNAME" == "${@: -1}" ]; then exit 1; else continue; fi
	        else
    		    echo " :: Install package $PNAME"
	        fi
    	fi
		
		res="True"
	    # LOCAL ARCHIVE
	    if [[ -e $PACKAGES_PATH/$PNAME.tgz ]]; then
	        echo "   + Package archive already in cache"
	        echo "     + Check MD5"
    	    R_INFO=$(echo `cat $REMOTE_DB_PATH | grep ^$PNAME | tail -n1`)
	        R_MD5=$(db_parse "md5" "$R_INFO")
    	    PPATH=$(get_ppath "$PNAME")
        	check_code $?
	        L_MD5=$(md5sum $PPATH.tgz | awk '{ print $1 }')
    	    if [ "$L_MD5" != "$R_MD5" ]; then echo "       + Invalide MD5Sum" && res=False; fi
	    else res="False"; fi

    	# DOWNLOAD PACKAGE
	    if [[ "$res" == "False" ]]; then
    	    download_package "$PNAME"
	
    	    R_INFO=$(echo `cat $REMOTE_DB_PATH | grep ^$PNAME | tail -n1`)
        	R_MD5=$(db_parse "md5" "$R_INFO")
	        PPATH=$(get_ppath "$PNAME")
    	    check_code $?
        	L_MD5=$(md5sum $PPATH.tgz | awk '{ print $1 }')
	         echo "   + Check MD5"
    	    if [ "$L_MD5" != "$R_MD5" ]; then echo "     + Invalide MD5Sum" && exit 1; fi
	    fi	

		load_control_tpl
	    . $PPATH/control
	    check_code $? "Source control file from $PNAME failure"
	    echo "   + Pre-install"
	    pre_install
	    check_code $? "Pre-install step failure"
	    echo "   + Copying files"
	    cd $PREFIX
	    tar xfz $PPATH/files.tgz
	    check_code $? "Untar files.tgz ($PNAME) failure"
    	echo "   + Post-install"
	    post_install
    	check_code $? "Post-install function ($PNAME) failure"
	    db_set "$PNAME" "$VERSION-$RELEASE" "installed"

    	echo "   + Remove package folder"
	    rm -Rf $PPATH
    	check_code $? "Post installation package folder remove failure"
	    echo " + Done"
	done
}

function install_local_package(){
    FULLPATH=$1
    FILENAME="${FULLPATH##*/}"
    if ! [[ ${FILENAME: -4} == ".tgz" || $(exit $?) == 1 ]]; then
        echo "Package format must be packagename.tgz"
        exit 1
    fi
    PNAME="${FILENAME%.[^.]*}"
    if [ -z "$PNAME" ]; then
        echo "There is an error in the path"
        exit 1
    fi
    DBINFO=$(db_get "$PNAME")
    L_STATUS=$(db_parse "status" "$DBINFO")
    if [[ "$L_STATUS" == "installed"  && "$2" == "force" ]]; then
        echo " :: Reinstall $PNAME"
    elif [[ "$L_STATUS" == "installed" && -z "$2" ]]; then
		echo " :: Package $PNAME already installed"
		exit 1
	else
        echo " :: Install package $PNAME"
    fi

    cp $FULLPATH $PACKAGES_PATH
    cd $PACKAGES_PATH
    tar xfz $PNAME.tgz
    check_code $? "Untar package ($PNAME.tgz) failure"
    PPATH=$PACKAGES_PATH/$PNAME
	
	load_control_tpl
	. $PPATH/control	
    check_code $? "Source control file from $PNAME failure"
	echo "   + Pre-install"
    pre_install
	check_code $? "Pre-install step failure"
	echo "   + Copying files"
    cd $PREFIX
    tar xfz $PPATH/files.tgz
    check_code $? "Untar files.tgz ($PNAME) failure"
	echo "   + Post-install"
    post_install
    check_code $? "Post-install step ($PNAME) failure"

    db_set "$PNAME" "$VERSION-$RELEASE" "installed"
	
	echo "   + Remove package folder"
    rm -Rf $PPATH
    check_code $? "Post install-local package folder remove failure"

    echo " + Done"  
}

function remove_package(){
    PNAME=$1
    DBINFO=$(db_get "$PNAME")
    PSTATUS=$(db_parse "status" "$DBINFO")

    if [ "x$PSTATUS" == "xinstalled" ]; then
        echo " :: Remove package $PNAME"
	    PPATH=$(get_ppath "$PNAME")
		check_code $? "Package manipulation failure (Untar..)"
		load_control_tpl
        . $PPATH/control
        check_code $? "Source control file from $PNAME failure"
		echo "   + Pre-remove"
        pre_remove
		check_code $? "Pre-remove step failure"
		echo "   + Remove files"
		while read line; do
			rm -Rf $(echo $line | cut -b 1-2 --complement)
		done < $PPATH/files.lst
        check_code $? "Remove files in files.lst ($PNAME) failure"
		echo "   + Post-remove"
		post_remove
		check_code $? "Post-remove step failure"

		echo "   + Remove package folder"
	    rm -Rf $PPATH
    	check_code $? "Post remove package folder remove failure"
	
        db_del "$PNAME"
    else
        echo " :: Package $PNAME is not installed"
        exit 1
    fi
    echo " + Done"
}

function upgrade_package(){
    update_db
	PNAME=$1
    DBINFO=$(db_get "$PNAME")
	L_STATUS=$(db_parse "status" "$DBINFO")

	if [ "$L_STATUS" == "installed" ]; then
		L_VERS=$(db_parse "version" "$DBINFO")
    	L_REL=$(db_parse "release" "$DBINFO")
		R_INFO=$(echo `cat $REMOTE_DB_PATH | grep ^$PNAME | tail -n1`)
		R_VERS=$(db_parse "version" "$R_INFO")
		R_REL=$(db_parse "release" "$R_INFO")
		R_MD5=$(db_parse "md5" "$R_INFO")

		if [ "$R_VERS" == "$L_VERS" ]; then	
			if [ "$R_REL" == "$L_REL" ]; then
				echo " :: No new version or release for $PNAME"
				exit 1
			else echo " :: Upgrade package release $PNAME ...";	fi
		else echo " :: Upgrade package version $PNAME ..."; fi

	    download_package "$PNAME"
	
	    PPATH=$(get_ppath "$PNAME")
	    check_code $?

    	L_MD5=$(md5sum $PPATH.tgz | awk '{ print $1 }')

	    echo "   + Checking Md5Sum.."
    	if [ "$L_MD5" != "$R_MD5" ]; then check_code $? "Md5sum Error!" && exit 0; fi

		load_control_tpl
	    . $PPATH/control
	    check_code $? "Source control file from $PNAME failure"
		echo "   + Pre-update"
		pre_update
		check_code $? "Pre-update function ($PNAME) failure"
		echo "   + Update"
    	cd $PREFIX
	    tar xfz $PPATH/files.tgz
    	check_code $? "Untar package ($PNAME.tgz) failure"
		echo "   + Post-update"
    	post_update
	    check_code $? "Post-update function ($PNAME) failure"

    	db_set "$PNAME" "$VERSION-$RELEASE" "installed"

		echo "   + Remove package folder"
    	rm -Rf $PPATH
	    check_code $? "Post upgrade package folder remove failure"

	else 
		echo " :: Package $PNAME is not installed"
        exit 1
    fi
    echo "   + Done"
}
