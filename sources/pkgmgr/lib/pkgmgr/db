#!/bin/bash
#--------------------------------
# Copyright (c) 2011 "Capensis" [http://www.capensis.com]
#
# This file is part of Canopsis.
#
# Canopsis is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Canopsis is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Canopsis.  If not, see <http://www.gnu.org/licenses/>.
# ---------------------------------

# Get a local package line
function db_get () {
	PNAME=$1
	touch $LOCAL_DB_PATH
	echo `cat $LOCAL_DB_PATH | grep "^$PNAME|" | tail -n1`
}

# Insert new package installed
function db_set () {
	PNAME=$1
	VERS=$2
	STATUS=$3
	MD5=$4
	DEPS=$5
	sed "/^$PNAME|/d" -i $LOCAL_DB_PATH
	echo "$PNAME|$VERS|$STATUS|$MD5|$DEPS" >> $LOCAL_DB_PATH
	check_code $? "Database insertion ($PNAME)"
}

# Delete package entri
function db_del () {
	PNAME=$1
	sed "/^$PNAME|/d" -i $LOCAL_DB_PATH
	check_code $? "Database deletion ($PNAME)"
}

# Parse package information
function db_parse () {
	INFO=$1
	DATA=$2
	if [ "x$INFO" = "xversion" ]; then
		VERS_INFO=$(echo "$DATA" | cut -d '|' -f2)
		echo "$VERS_INFO" | cut -d '-' -f1
	elif [ "x$INFO" = "xrelease" ]; then
		VERS_INFO=$(echo "$DATA" | cut -d '|' -f2)
		echo "$VERS_INFO" | cut -d '-' -f2
	else
		if [ "x$INFO" = "xname" ]; then
			FIELD=1
		elif [ "x$INFO" = "xstatus" ]; then
			FIELD=3
		elif [ "x$INFO" = "xmd5" ]; then
			FIELD=4
		elif [ "x$INFO" = "xdeps" ]; then
			FIELD=5
		fi
		echo "$DATA" | cut -d '|' -f$FIELD
	fi
}

# Check if repo is available
function check_repo () {
	cd $HOME/var/log
	response=$(curl -I --write-out %{http_code} --silent --output /dev/null $REPO_URL)
	if [ "$response" != "200" ]; then
		echo " :: Error: $REPO_URL is not joinable ($response) !"
		exit 1
	fi
}

# Download Package list
function update_db () {
	echo " :: Download Packages.list ..."
	check_repo
	# Create Repo URL
	if [ -z "$REPO_BASE" ]; then
		FINAL_URL=$REPO_URL/$REPO_VERS/$ARCH/$DIST/$DIST_VERS
	else
		FINAL_URL=$REPO_URL/$REPO_BASE/$REPO_VERS/$ARCH/$DIST/$DIST_VERS
	fi

	# Remove old db
	rm -Rf $REMOTE_DB_PATH
	check_code $? " # Failure during remove old database"

	wget "$FINAL_URL/Packages.list" -O $REMOTE_DB_PATH -a $LOG_PATH
	check_code $? " # Packages.list not accessible (wget failure) ($FINAL_URL/Packages.list"

	echo "LAST_UPDATE|`date`" > $VARLIB_PATH/info
	check_code $? " # Pkgmgr info file insertion error"
	echo "    + Done"
}
