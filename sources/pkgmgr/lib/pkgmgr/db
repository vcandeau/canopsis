#!/bin/bash
#--------------------------------
# Copyright (c) 2011 "Capensis" [http://www.capensis.com]
#
# This file is part of Canopsis.
#
# Canopsis is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Canopsis is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Canopsis.  If not, see <http://www.gnu.org/licenses/>.
# ---------------------------------

db_get () {
	PNAME="${1}"
	log_info "Get package ($PNAME) informations"
	trap 'error ${LINENO} "Error during get package informations in local db ($PNAME/$LOCAL_DB_PATH)"' ERR
	echo `cat $LOCAL_DB_PATH | grep "^$PNAME|" | tail -n1`
}

db_set () {
	PNAME=$1
	VERS=$2
	STATUS=$3
	MD5=$4
	DEPS=$5
	log_info "Remove package informations from local db ($PNAME)"
	trap 'error ${LINENO} "Remove old package entrie in local db ($PNAME)"' ERR
	sed "/^$PNAME|/d" -i "$LOCAL_DB_PATH"
	log_info "Insert package informations in db ($PNAME)"
	trap 'error ${LINENO} "Insert package informations in database ($PNAME)"' ERR
	echo "$PNAME|$VERS|$STATUS|$MD5|$DEPS" >> "$LOCAL_DB_PATH"
}

db_del () {
	PNAME=$1
	log_info "Remove package informations from local db ($PNAME)"
	trap 'error ${LINENO} "Delete package informations in database ($PNAME)"' ERR
	sed "/^$PNAME|/d" -i "$LOCAL_DB_PATH"
}

db_parse () {
	INFO=$1
	DATA=$2
	if [ "x$INFO" = "xversion" ]; then
		VERS_INFO=$(echo "$DATA" | cut -d '|' -f2)
		echo "$VERS_INFO" | cut -d '-' -f1
	elif [ "x$INFO" = "xrelease" ]; then
		VERS_INFO=$(echo "$DATA" | cut -d '|' -f2)
		echo "$VERS_INFO" | cut -d '-' -f2
	else
		if [ "x$INFO" = "xname" ]; then
			FIELD=1
		elif [ "x$INFO" = "xstatus" ]; then
			FIELD=3
		elif [ "x$INFO" = "xmd5" ]; then
			FIELD=4
		elif [ "x$INFO" = "xdeps" ]; then
			FIELD=5
		elif [ "x$INFO" = "xarch" ]; then
			FIELD=6
		elif [ "x$INFO" = "xdist" ]; then
			FIELD=7
		elif [ "x$INFO" = "xdistvers" ]; then
			FIELD=8
		fi
		trap 'error ${LINENO} "Get specific package information ($PNAME/$INFO)\nIN: $DATA"' ERR
		echo "$DATA" | cut -d '|' -f$FIELD 
	fi
}

check_repo () {
	log_info "Check if repositorie is available ($REPO_URL)"
	response=$(curl -I --write-out %{http_code} --silent --output /dev/null $REPO_URL)
	if [ "$response" != "200" ]; then
		error ${LINENO} "Check repositorie\nCurl return $response code in http header of $REPO_URL" 1
	fi
}

clean_packages_list () {
	LIST_PATH=$1
	FIELD_NAME=1
	log_info "Clean useless arch and sitro from Packages.list"
	# Remove useless ARCH
	while read line; do
		C_PNAME=$(echo "$line" | cut -d '|' -f$FIELD_NAME)
		C_ARCH=$(db_parse "arch" "$line")
		if [ "$C_ARCH" != "$ARCH" ] && [ "$C_ARCH" != "noarch" ]; then
			sed -i /^"$line"$/d $LIST_PATH
		fi	
	done < "$LIST_PATH"
	# Remove useless DISTRO
	while read line; do
		C_PNAME=$(echo "$line" | cut -d '|' -f$FIELD_NAME)
		C_DIST=$(db_parse "dist" "$line")	
		if [ "$C_DIST" != "$DIST" ] && [ "$C_DIST" != "nodist" ]; then
			sed -i /^"$line"$/d $LIST_PATH
		fi
	done < "$LIST_PATH"
	# Remove useless DISTRO VERSIONS
	while read line; do
		C_PNAME=$(echo "$line" | cut -d '|' -f$FIELD_NAME)
		C_DISTVERS=$(db_parse "distvers" "$line")	
		if [ "$C_DISTVERS" != "$DIST_VERS" ] && [ "$C_DISTVERS" != "novers" ]; then
			sed -i /^"$line"$/d $LIST_PATH
		fi	
	done < "$LIST_PATH"
	# Remove useless arch if specific arch is available
	while read line; do
		C_PNAME=$(echo "$line" | cut -d '|' -f$FIELD_NAME)
		T_NB=$(cat "$LIST_PATH" | grep ^$C_PNAME | wc -l)
		if [ $T_NB -gt 1 ]; then
			T_LINE=$(grep ^$C_PNAME "$LIST_PATH" | grep "noarch")
			sed -i /^"$T_LINE"/d "$LIST_PATH"
		fi
	done < "$LIST_PATH"
}

update_db () {
	log_info "Download Packages.list"
	echo " :: Download Packages.list ..."
	check_repo
	if [ -z "$REPO_BASE" ]; then
		FINAL_URL=$REPO_URL/$REPO_VERS
	else
		FINAL_URL=$REPO_URL/$REPO_BASE/$REPO_VERS
	fi
	log_info "Url: $REPO_URL/$REPO_BASE/$REPO_VERS"
	log_info "Remove old database"
	trap 'error ${LINENO} "Remove old database ($REMOTE_DB_PATH)"' ERR
	rm -Rf "$REMOTE_DB_PATH"
	log_info "Download Packages.list"
	trap 'error ${LINENO} "Error Packages.list not accessible ($FINAL_URL/Packages.list)"' ERR
	curl --silent -o "$REMOTE_DB_PATH" "$FINAL_URL/Packages.list"
	clean_packages_list "$REMOTE_DB_PATH"
	log_info "Update Last Update in info file"
	trap 'error ${LINENO} "Remove Last Update time in info file"' ERR
	sed -i /^"LAST_UPDATE|"/d $VARLIB_PATH/info
	trap 'error ${LINENO} "Insert Last Update time in info file"' ERR
	echo "LAST_UPDATE|`date`" >> $VARLIB_PATH/info
	echo "    + Done"
	log_info "Finished"
}
