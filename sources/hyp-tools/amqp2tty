#!/usr/bin/env python

import time
import signal
import threading
import json
import logging

import sysv_ipc
import socket

from hypamqp import hypamqp

########################################################
#
#   Configuration
#
########################################################

DAEMON_NAME = "amqp2tty"
DAEMON_TYPE = "logger"

EXCHANGE_NAME = "hypervision"

AMQP_HOST = "localhost"

logging.basicConfig(level=logging.DEBUG,
                    format='%(asctime)s %(name)s %(levelname)s %(message)s',
                    )
logger = logging.getLogger(DAEMON_NAME)

########################################################
#
#   Threads
#
########################################################


### AMQP
class thread_amqp_emitter(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)

	self.amqp = hypamqp(
		hostname="127.0.0.1",
		port=5672,
                userid="guest",
                password="guest",
                virtual_host="/",
		insist=True,
		exchange_name=EXCHANGE_NAME
		)

	self.amqp.connect()
	self.queue = self.amqp.createTopicQueue(DAEMON_NAME, "#")

	logger.debug("AMQP Emitter Initialized")

    def on_message(self, rawmsg):	
	body = rawmsg.payload
	print "Message: %s" % body

    def run(self):
	logger.debug("AMQP Receiver is running ...")

	#self.connect()

        while RUN:
		if self.amqp.connected:
			rawmsg = self.queue.get(no_ack=True)
			if rawmsg:
				#logger.debug("Message received")
				self.on_message(rawmsg)
			else:
				time.sleep(0.2)	
		else:
			time.sleep(3)	


    def stop(self):
        pass

########################################################
#
#   Functions
#
########################################################

RUN = 1
#### Connect signals

def signal_handler(signum, frame):
    logger.warning("Receive signal to stop daemon...")
    global RUN
    RUN = 0
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)


########################################################
#
#   Main
#
########################################################

thr_amqp = thread_amqp_emitter()

### Start Main !
thr_amqp.start()

### Main Loop
while RUN:
        time.sleep(2)

thr_amqp.stop()
